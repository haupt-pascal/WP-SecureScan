#!/bin/bash

# Set initial variables
time_start=$(date +%s)
filename="malware_scanner.sh"
alarms=()
interactive=0
force=0
lock=0
unlock=0
perms=0
total=0
force=0
verbose=0

# Help
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: ./malware_scanner.sh [--perms] [--force] [--lock] [--unlock] [--verbose] [--help]"
    echo ""
    echo "Options:"
    #echo "--perms         Fix file permissions"
    #echo "--force         Disable prompting for CHMOD 0000 operations"
    #echo "--lock          Set permissions for lockdown"
    #echo "--unlock        Set permissions for auto-update"
    echo "--verbose       Enable interactive reporting"
    echo "--help          Display this help message"
    echo " "
    exit 0
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --perms)
            perms=1
            ;;
        --force | -f)
            force=1
            ;;
        --lock | -l)
            lock=1
            ;;
        --unlock | -u)
            unlock=1
            ;;
        --verbose | -v)
            verbose=1
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
            ;;
    esac
    shift
done

if [[ $verbose -eq 1 ]]; then
    echo "[X] Verbose mode"
else
    echo "[ ] Verbose mode"
fi

#if [[ $force -eq 1 ]]; then
#    echo "[X] Force mode"
#else
#    echo "[ ] Force mode"
#fi

#if [[ $lock -eq 1 ]]; then
#    echo "[X] Lock mode"
#else
#    echo "[ ] Lock mode"
#fi

#if [[ $unlock -eq 1 ]]; then
#    echo "[X] Unlock mode"
#else
#    echo "[ ] Unlock mode"
#fi

#if [[ $perms -eq 1 ]]; then
#    echo "[X] Fix file permissions"
#else
#    echo "[ ] Fix file permissions"
#fi

# Scan and process files

scan_and_process_files() {
    local directory="$(pwd)"

    echo "Scanning for malware patterns..."
    echo " "
    check_malware_patterns "$directory"
    if [[ $verbose -eq 0 ]]; then
        send_security_report
    fi
}

# Check for malware patterns
check_malware_patterns() {
    local directory="$1"
    local temp_file=$(mktemp)

    find "$directory" -type f \( -name "*.php" -o -name "*.js" \) -print0 > "$temp_file"

    while IFS= read -r -d '' file; do
        ((total++))
        line_number=0
        current_filename=$(basename "$file")

        if [[ $current_filename != "$filename" ]]; then
            while IFS= read -r line; do
                ((line_number++))
                patterns=("source=base64_decode" "eval.*base64_decode" "POST.*execgate" "touch(\"wp-optionstmp.php\"" "file_put_contents.*wp-options" "touch.*wp-options\.php" "code_inject_sape" "xmlrpc.php\".*mktime\(" "jquery.php\".*mktime\(" "exec\(\"find\ " "exec\(\'find\ " "assert\((\"|\')e(\"|\')\.(\"|\')v(\"|\')" "\(gzinflate\(str_rot13\(base64_decode" "preg_replace\((\"|\')\/\.\*\/e(\"|\')\,(\"|\')" "\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65" "\\\\x65\\\\x76\\\\x61\\\\x6c\\\\x28\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65\\\\x28\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65\\\\x28" "\\\x48" "\x48" "\x48" "\141" "\x30" "\x52" "\110" "\x63" "\66" "\115" "\x79" "\114" "\x6a" "\71" "\x43" "\x4e" "\160" "\35" "\63" "\x59" "\30" "\143" "\156" "\x4c" "\65" "\150" "\151" "\x65" "\x38" "\75" "\x")
                regex="($(IFS='|'; echo "${patterns[*]}"))"
                if [[ $line =~ $regex ]]; then
                    interact "$line" "$directory" "$file" "$line_number"
                    if [[ $verbose -eq 1 ]]; then
                        send_security_report
                    fi
                fi

                if [[ $line =~ ('[a-z0-9]')\=\>(''[a-z0-9]'') ]]; then
                    interact "$line" "$directory" "$file" "$line_number"
                    if [[ $verbose -eq 1 ]]; then
                        send_security_report
                    fi
                fi

                if [[ $line =~ "VpT32" ]]; then
                    interact "$line" "$directory" "$file" "$line_number"
                    if [[ $verbose -eq 1 ]]; then
                        send_security_report
                    fi
                fi
            done < "$file"
        fi
    done < "$temp_file"

    rm "$temp_file"
}

# Interact with user
interact() {
    local line="$1"
    local directory="$2"
    local file="$3"
    local line_number="$4"

    echo "###################################################################################################################################"
    echo " "
    echo "Suspicious content detected in: $file"
    echo "Detailed information:"
    grep -E -o "eval\(.*base64_decode\(|eval\(.*gzinflate\(|base64_decode\(|eval\(.*\$_(GET|POST|REQUEST)|eval\(.*preg_replace\(.*\/e|eval\(.*assert\(.*\$_|eval\(.*file_get_contents\(.*\$_|eval\(.*str_rot13\(.*\$_|eval\(.*gzuncompress\(.*\$_|(passthru|shell_exec|popen|proc_open|pcntl_exec|phpinfo|backdoor|webshell|c99shell|r57shell)\s*\(|(exec|curl_exec)\s*\(|source=base64_decode|POST.*execgate|touch\(\"wp-optionstmp.php\"|file_put_contents.*wp-options|touch.*wp-options\.php|code_inject_sape|xmlrpc.php\".*mktime\(|jquery.php\".*mktime\(|exec\(\"find\ |exec\(\'find\ |assert\((\"|\')e(\"|\')\.(\"|\')v(\"|\')|\(gzinflate\(str_rot13\(base64_decode|preg_replace\((\"|\')\/\.\*\/e(\"|\')\,(\"|\')|\\\x62\\\x61\\\x73\\\x65\\\x36\\\x34\\\x5f\\\x64\\\x65\\\x63\\\x6f\\\x64\\\x65|\\\x65\\\x76\\\x61\\\x6c\\\x28\\\x67\\\x7a\\\x69\\\x6e\\\x66\\\x6c\\\x61\\\x74\\\x65\\\x28\\\x62\\\x61\\\x73\\\x65\\\x36\\\x34\\\x5f\\\x64\\\x65\\\x63\\\x6f\\\x64\\\x65\\\x28|\\\x48" "$file"
    echo " "
    echo "###################################################################################################################################"

    if [[ $perms -eq 1 ]]; then
        chmod 644 "$file"
        echo "Permissions set for: $file"
    fi

    if [[ $fix_compromised_files -eq 1 ]]; then
        echo "Fixing compromised file: $file"
    fi
}

# Send security report
send_security_report() {
    local date=$(date)
    local msg="Scan complete ($total Files) - Security Report on $date"
    local body="Suspicious activity detected. Please review the security report for detailed information."
    body+="\n\n"
    body+=$(printf '%s\n' "${alarms[@]}")

    echo -e "$body" | mail -s "Security Report" "$email"
}

# Main
scan_and_process_files "$PWD"

# Display execution time
time_end=$(date +%s)
execution_time=$((time_end - time_start))
echo "Total Execution Time: $execution_time seconds"
msg="Scan complete ($total Files)"
echo "$msg"
